
AVRASM ver. 2.2.8  D:\4to Ingeniería Electrónica\Técnicas Digitales II\parcial II\Ejercicio1-Parcial2\Ejercicio1-Parcial2\main.asm Tue Oct 25 10:16:01 2022

[builtin](2): Including file 'D:/MicrochipStudio\7.0\Packs\atmel\ATmega_DFP\1.7.374\avrasm\inc\m328Pdef.inc'
[builtin](2): Including file 'D:/MicrochipStudio\7.0\Packs\atmel\ATmega_DFP\1.7.374\avrasm\inc\m328Pdef.inc'
                                 
                                 ;
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega328P.xml **********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m328Pdef.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega328P
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega328P
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M328PDEF_INC_
                                 #define _M328PDEF_INC_
                                 
                                 
                                 #pragma partinc 0
                                 
                                 ; ***** SPECIFY DEVICE ***************************************************
                                 .device ATmega328P
                                 #pragma AVRPART ADMIN PART_NAME ATmega328P
                                 .equ	SIGNATURE_000	= 0x1e
                                 .equ	SIGNATURE_001	= 0x95
                                 .equ	SIGNATURE_002	= 0x0f
                                 
                                 #pragma AVRPART CORE CORE_VERSION V2E
                                 
                                 
                                 ; ***** I/O REGISTER DEFINITIONS *****************************************
                                 ; NOTE:
                                 ; Definitions marked "MEMORY MAPPED"are extended I/O ports
                                 ; and cannot be used with IN/OUT instructions
                                 .equ	UDR0	= 0xc6	; MEMORY MAPPED
                                 .equ	UBRR0L	= 0xc4	; MEMORY MAPPED
                                 .equ	UBRR0H	= 0xc5	; MEMORY MAPPED
                                 .equ	UCSR0C	= 0xc2	; MEMORY MAPPED
                                 .equ	UCSR0B	= 0xc1	; MEMORY MAPPED
                                 .equ	UCSR0A	= 0xc0	; MEMORY MAPPED
                                 .equ	TWAMR	= 0xbd	; MEMORY MAPPED
                                 .equ	TWCR	= 0xbc	; MEMORY MAPPED
                                 .equ	TWDR	= 0xbb	; MEMORY MAPPED
                                 .equ	TWAR	= 0xba	; MEMORY MAPPED
                                 .equ	TWSR	= 0xb9	; MEMORY MAPPED
                                 .equ	TWBR	= 0xb8	; MEMORY MAPPED
                                 .equ	ASSR	= 0xb6	; MEMORY MAPPED
                                 .equ	OCR2B	= 0xb4	; MEMORY MAPPED
                                 .equ	OCR2A	= 0xb3	; MEMORY MAPPED
                                 .equ	TCNT2	= 0xb2	; MEMORY MAPPED
                                 .equ	TCCR2B	= 0xb1	; MEMORY MAPPED
                                 .equ	TCCR2A	= 0xb0	; MEMORY MAPPED
                                 .equ	OCR1BL	= 0x8a	; MEMORY MAPPED
                                 .equ	OCR1BH	= 0x8b	; MEMORY MAPPED
                                 .equ	OCR1AL	= 0x88	; MEMORY MAPPED
                                 .equ	OCR1AH	= 0x89	; MEMORY MAPPED
                                 .equ	ICR1L	= 0x86	; MEMORY MAPPED
                                 .equ	ICR1H	= 0x87	; MEMORY MAPPED
                                 .equ	TCNT1L	= 0x84	; MEMORY MAPPED
                                 .equ	TCNT1H	= 0x85	; MEMORY MAPPED
                                 .equ	TCCR1C	= 0x82	; MEMORY MAPPED
                                 .equ	TCCR1B	= 0x81	; MEMORY MAPPED
                                 .equ	TCCR1A	= 0x80	; MEMORY MAPPED
                                 .equ	DIDR1	= 0x7f	; MEMORY MAPPED
                                 .equ	DIDR0	= 0x7e	; MEMORY MAPPED
                                 .equ	ADMUX	= 0x7c	; MEMORY MAPPED
                                 .equ	ADCSRB	= 0x7b	; MEMORY MAPPED
                                 .equ	ADCSRA	= 0x7a	; MEMORY MAPPED
                                 .equ	ADCH	= 0x79	; MEMORY MAPPED
                                 .equ	ADCL	= 0x78	; MEMORY MAPPED
                                 .equ	TIMSK2	= 0x70	; MEMORY MAPPED
                                 .equ	TIMSK1	= 0x6f	; MEMORY MAPPED
                                 .equ	TIMSK0	= 0x6e	; MEMORY MAPPED
                                 .equ	PCMSK1	= 0x6c	; MEMORY MAPPED
                                 .equ	PCMSK2	= 0x6d	; MEMORY MAPPED
                                 .equ	PCMSK0	= 0x6b	; MEMORY MAPPED
                                 .equ	EICRA	= 0x69	; MEMORY MAPPED
                                 .equ	PCICR	= 0x68	; MEMORY MAPPED
                                 .equ	OSCCAL	= 0x66	; MEMORY MAPPED
                                 .equ	PRR	= 0x64	; MEMORY MAPPED
                                 .equ	CLKPR	= 0x61	; MEMORY MAPPED
                                 .equ	WDTCSR	= 0x60	; MEMORY MAPPED
                                 .equ	SREG	= 0x3f
                                 .equ	SPL	= 0x3d
                                 .equ	SPH	= 0x3e
                                 .equ	SPMCSR	= 0x37
                                 .equ	MCUCR	= 0x35
                                 .equ	MCUSR	= 0x34
                                 .equ	SMCR	= 0x33
                                 .equ	ACSR	= 0x30
                                 .equ	SPDR	= 0x2e
                                 .equ	SPSR	= 0x2d
                                 .equ	SPCR	= 0x2c
                                 .equ	GPIOR2	= 0x2b
                                 .equ	GPIOR1	= 0x2a
                                 .equ	OCR0B	= 0x28
                                 .equ	OCR0A	= 0x27
                                 .equ	TCNT0	= 0x26
                                 .equ	TCCR0B	= 0x25
                                 .equ	TCCR0A	= 0x24
                                 .equ	GTCCR	= 0x23
                                 .equ	EEARH	= 0x22
                                 .equ	EEARL	= 0x21
                                 .equ	EEDR	= 0x20
                                 .equ	EECR	= 0x1f
                                 .equ	GPIOR0	= 0x1e
                                 .equ	EIMSK	= 0x1d
                                 .equ	EIFR	= 0x1c
                                 .equ	PCIFR	= 0x1b
                                 .equ	TIFR2	= 0x17
                                 .equ	TIFR1	= 0x16
                                 .equ	TIFR0	= 0x15
                                 .equ	PORTD	= 0x0b
                                 .equ	DDRD	= 0x0a
                                 .equ	PIND	= 0x09
                                 .equ	PORTC	= 0x08
                                 .equ	DDRC	= 0x07
                                 .equ	PINC	= 0x06
                                 .equ	PORTB	= 0x05
                                 .equ	DDRB	= 0x04
                                 .equ	PINB	= 0x03
                                 
                                 
                                 ; ***** BIT DEFINITIONS **************************************************
                                 
                                 ; ***** USART0 ***********************
                                 ; UDR0 - USART I/O Data Register
                                 .equ	UDR0_0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR0_1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR0_2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR0_3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR0_4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR0_5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR0_6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR0_7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR0A - USART Control and Status Register A
                                 .equ	MPCM0	= 0	; Multi-processor Communication Mode
                                 .equ	U2X0	= 1	; Double the USART transmission speed
                                 .equ	UPE0	= 2	; Parity Error
                                 .equ	DOR0	= 3	; Data overRun
                                 .equ	FE0	= 4	; Framing Error
                                 .equ	UDRE0	= 5	; USART Data Register Empty
                                 .equ	TXC0	= 6	; USART Transmitt Complete
                                 .equ	RXC0	= 7	; USART Receive Complete
                                 
                                 ; UCSR0B - USART Control and Status Register B
                                 .equ	TXB80	= 0	; Transmit Data Bit 8
                                 .equ	RXB80	= 1	; Receive Data Bit 8
                                 .equ	UCSZ02	= 2	; Character Size
                                 .equ	TXEN0	= 3	; Transmitter Enable
                                 .equ	RXEN0	= 4	; Receiver Enable
                                 .equ	UDRIE0	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE0	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE0	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR0C - USART Control and Status Register C
                                 .equ	UCPOL0	= 0	; Clock Polarity
                                 .equ	UCSZ00	= 1	; Character Size
                                 .equ	UCPHA0	= UCSZ00	; For compatibility
                                 .equ	UCSZ01	= 2	; Character Size
                                 .equ	UDORD0	= UCSZ01	; For compatibility
                                 .equ	USBS0	= 3	; Stop Bit Select
                                 .equ	UPM00	= 4	; Parity Mode Bit 0
                                 .equ	UPM01	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL00	= 6	; USART Mode Select
                                 .equ	UMSEL0	= UMSEL00	; For compatibility
                                 .equ	UMSEL01	= 7	; USART Mode Select
                                 .equ	UMSEL1	= UMSEL01	; For compatibility
                                 
                                 ; UBRR0H - USART Baud Rate Register High Byte
                                 .equ	UBRR8	= 0	; USART Baud Rate Register bit 8
                                 .equ	UBRR9	= 1	; USART Baud Rate Register bit 9
                                 .equ	UBRR10	= 2	; USART Baud Rate Register bit 10
                                 .equ	UBRR11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR0L - USART Baud Rate Register Low Byte
                                 .equ	_UBRR0	= 0	; USART Baud Rate Register bit 0
                                 .equ	_UBRR1	= 1	; USART Baud Rate Register bit 1
                                 .equ	UBRR2	= 2	; USART Baud Rate Register bit 2
                                 .equ	UBRR3	= 3	; USART Baud Rate Register bit 3
                                 .equ	UBRR4	= 4	; USART Baud Rate Register bit 4
                                 .equ	UBRR5	= 5	; USART Baud Rate Register bit 5
                                 .equ	UBRR6	= 6	; USART Baud Rate Register bit 6
                                 .equ	UBRR7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 ; ***** TWI **************************
                                 ; TWAMR - TWI (Slave) Address Mask Register
                                 .equ	TWAM0	= 1	; 
                                 .equ	TWAMR0	= TWAM0	; For compatibility
                                 .equ	TWAM1	= 2	; 
                                 .equ	TWAMR1	= TWAM1	; For compatibility
                                 .equ	TWAM2	= 3	; 
                                 .equ	TWAMR2	= TWAM2	; For compatibility
                                 .equ	TWAM3	= 4	; 
                                 .equ	TWAMR3	= TWAM3	; For compatibility
                                 .equ	TWAM4	= 5	; 
                                 .equ	TWAMR4	= TWAM4	; For compatibility
                                 .equ	TWAM5	= 6	; 
                                 .equ	TWAMR5	= TWAM5	; For compatibility
                                 .equ	TWAM6	= 7	; 
                                 .equ	TWAMR6	= TWAM6	; For compatibility
                                 
                                 ; TWBR - TWI Bit Rate register
                                 .equ	TWBR0	= 0	; 
                                 .equ	TWBR1	= 1	; 
                                 .equ	TWBR2	= 2	; 
                                 .equ	TWBR3	= 3	; 
                                 .equ	TWBR4	= 4	; 
                                 .equ	TWBR5	= 5	; 
                                 .equ	TWBR6	= 6	; 
                                 .equ	TWBR7	= 7	; 
                                 
                                 ; TWCR - TWI Control Register
                                 .equ	TWIE	= 0	; TWI Interrupt Enable
                                 .equ	TWEN	= 2	; TWI Enable Bit
                                 .equ	TWWC	= 3	; TWI Write Collition Flag
                                 .equ	TWSTO	= 4	; TWI Stop Condition Bit
                                 .equ	TWSTA	= 5	; TWI Start Condition Bit
                                 .equ	TWEA	= 6	; TWI Enable Acknowledge Bit
                                 .equ	TWINT	= 7	; TWI Interrupt Flag
                                 
                                 ; TWSR - TWI Status Register
                                 .equ	TWPS0	= 0	; TWI Prescaler
                                 .equ	TWPS1	= 1	; TWI Prescaler
                                 .equ	TWS3	= 3	; TWI Status
                                 .equ	TWS4	= 4	; TWI Status
                                 .equ	TWS5	= 5	; TWI Status
                                 .equ	TWS6	= 6	; TWI Status
                                 .equ	TWS7	= 7	; TWI Status
                                 
                                 ; TWDR - TWI Data register
                                 .equ	TWD0	= 0	; TWI Data Register Bit 0
                                 .equ	TWD1	= 1	; TWI Data Register Bit 1
                                 .equ	TWD2	= 2	; TWI Data Register Bit 2
                                 .equ	TWD3	= 3	; TWI Data Register Bit 3
                                 .equ	TWD4	= 4	; TWI Data Register Bit 4
                                 .equ	TWD5	= 5	; TWI Data Register Bit 5
                                 .equ	TWD6	= 6	; TWI Data Register Bit 6
                                 .equ	TWD7	= 7	; TWI Data Register Bit 7
                                 
                                 ; TWAR - TWI (Slave) Address register
                                 .equ	TWGCE	= 0	; TWI General Call Recognition Enable Bit
                                 .equ	TWA0	= 1	; TWI (Slave) Address register Bit 0
                                 .equ	TWA1	= 2	; TWI (Slave) Address register Bit 1
                                 .equ	TWA2	= 3	; TWI (Slave) Address register Bit 2
                                 .equ	TWA3	= 4	; TWI (Slave) Address register Bit 3
                                 .equ	TWA4	= 5	; TWI (Slave) Address register Bit 4
                                 .equ	TWA5	= 6	; TWI (Slave) Address register Bit 5
                                 .equ	TWA6	= 7	; TWI (Slave) Address register Bit 6
                                 
                                 
                                 ; ***** TIMER_COUNTER_1 **************
                                 ; TIMSK1 - Timer/Counter Interrupt Mask Register
                                 .equ	TOIE1	= 0	; Timer/Counter1 Overflow Interrupt Enable
                                 .equ	OCIE1A	= 1	; Timer/Counter1 Output CompareA Match Interrupt Enable
                                 .equ	OCIE1B	= 2	; Timer/Counter1 Output CompareB Match Interrupt Enable
                                 .equ	ICIE1	= 5	; Timer/Counter1 Input Capture Interrupt Enable
                                 
                                 ; TIFR1 - Timer/Counter Interrupt Flag register
                                 .equ	TOV1	= 0	; Timer/Counter1 Overflow Flag
                                 .equ	OCF1A	= 1	; Output Compare Flag 1A
                                 .equ	OCF1B	= 2	; Output Compare Flag 1B
                                 .equ	ICF1	= 5	; Input Capture Flag 1
                                 
                                 ; TCCR1A - Timer/Counter1 Control Register A
                                 .equ	WGM10	= 0	; Waveform Generation Mode
                                 .equ	WGM11	= 1	; Waveform Generation Mode
                                 .equ	COM1B0	= 4	; Compare Output Mode 1B, bit 0
                                 .equ	COM1B1	= 5	; Compare Output Mode 1B, bit 1
                                 .equ	COM1A0	= 6	; Comparet Ouput Mode 1A, bit 0
                                 .equ	COM1A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR1B - Timer/Counter1 Control Register B
                                 .equ	CS10	= 0	; Prescaler source of Timer/Counter 1
                                 .equ	CS11	= 1	; Prescaler source of Timer/Counter 1
                                 .equ	CS12	= 2	; Prescaler source of Timer/Counter 1
                                 .equ	WGM12	= 3	; Waveform Generation Mode
                                 .equ	WGM13	= 4	; Waveform Generation Mode
                                 .equ	ICES1	= 6	; Input Capture 1 Edge Select
                                 .equ	ICNC1	= 7	; Input Capture 1 Noise Canceler
                                 
                                 ; TCCR1C - Timer/Counter1 Control Register C
                                 .equ	FOC1B	= 6	; 
                                 .equ	FOC1A	= 7	; 
                                 
                                 ; GTCCR - General Timer/Counter Control Register
                                 .equ	PSRSYNC	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                                 .equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** TIMER_COUNTER_2 **************
                                 ; TIMSK2 - Timer/Counter Interrupt Mask register
                                 .equ	TOIE2	= 0	; Timer/Counter2 Overflow Interrupt Enable
                                 .equ	TOIE2A	= TOIE2	; For compatibility
                                 .equ	OCIE2A	= 1	; Timer/Counter2 Output Compare Match A Interrupt Enable
                                 .equ	OCIE2B	= 2	; Timer/Counter2 Output Compare Match B Interrupt Enable
                                 
                                 ; TIFR2 - Timer/Counter Interrupt Flag Register
                                 .equ	TOV2	= 0	; Timer/Counter2 Overflow Flag
                                 .equ	OCF2A	= 1	; Output Compare Flag 2A
                                 .equ	OCF2B	= 2	; Output Compare Flag 2B
                                 
                                 ; TCCR2A - Timer/Counter2 Control Register A
                                 .equ	WGM20	= 0	; Waveform Genration Mode
                                 .equ	WGM21	= 1	; Waveform Genration Mode
                                 .equ	COM2B0	= 4	; Compare Output Mode bit 0
                                 .equ	COM2B1	= 5	; Compare Output Mode bit 1
                                 .equ	COM2A0	= 6	; Compare Output Mode bit 1
                                 .equ	COM2A1	= 7	; Compare Output Mode bit 1
                                 
                                 ; TCCR2B - Timer/Counter2 Control Register B
                                 .equ	CS20	= 0	; Clock Select bit 0
                                 .equ	CS21	= 1	; Clock Select bit 1
                                 .equ	CS22	= 2	; Clock Select bit 2
                                 .equ	WGM22	= 3	; Waveform Generation Mode
                                 .equ	FOC2B	= 6	; Force Output Compare B
                                 .equ	FOC2A	= 7	; Force Output Compare A
                                 
                                 ; TCNT2 - Timer/Counter2
                                 .equ	TCNT2_0	= 0	; Timer/Counter 2 bit 0
                                 .equ	TCNT2_1	= 1	; Timer/Counter 2 bit 1
                                 .equ	TCNT2_2	= 2	; Timer/Counter 2 bit 2
                                 .equ	TCNT2_3	= 3	; Timer/Counter 2 bit 3
                                 .equ	TCNT2_4	= 4	; Timer/Counter 2 bit 4
                                 .equ	TCNT2_5	= 5	; Timer/Counter 2 bit 5
                                 .equ	TCNT2_6	= 6	; Timer/Counter 2 bit 6
                                 .equ	TCNT2_7	= 7	; Timer/Counter 2 bit 7
                                 
                                 ; OCR2A - Timer/Counter2 Output Compare Register A
                                 .equ	OCR2A_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2A_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2A_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2A_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2A_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2A_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2A_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2A_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; OCR2B - Timer/Counter2 Output Compare Register B
                                 .equ	OCR2B_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2B_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2B_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2B_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2B_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2B_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2B_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2B_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; ASSR - Asynchronous Status Register
                                 .equ	TCR2BUB	= 0	; Timer/Counter Control Register2 Update Busy
                                 .equ	TCR2AUB	= 1	; Timer/Counter Control Register2 Update Busy
                                 .equ	OCR2BUB	= 2	; Output Compare Register 2 Update Busy
                                 .equ	OCR2AUB	= 3	; Output Compare Register2 Update Busy
                                 .equ	TCN2UB	= 4	; Timer/Counter2 Update Busy
                                 .equ	AS2	= 5	; Asynchronous Timer/Counter2
                                 .equ	EXCLK	= 6	; Enable External Clock Input
                                 
                                 ; GTCCR - General Timer Counter Control register
                                 .equ	PSRASY	= 1	; Prescaler Reset Timer/Counter2
                                 .equ	PSR2	= PSRASY	; For compatibility
                                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** AD_CONVERTER *****************
                                 ; ADMUX - The ADC multiplexer Selection Register
                                 .equ	MUX0	= 0	; Analog Channel and Gain Selection Bits
                                 .equ	MUX1	= 1	; Analog Channel and Gain Selection Bits
                                 .equ	MUX2	= 2	; Analog Channel and Gain Selection Bits
                                 .equ	MUX3	= 3	; Analog Channel and Gain Selection Bits
                                 .equ	ADLAR	= 5	; Left Adjust Result
                                 .equ	REFS0	= 6	; Reference Selection Bit 0
                                 .equ	REFS1	= 7	; Reference Selection Bit 1
                                 
                                 ; ADCSRA - The ADC Control and Status register A
                                 .equ	ADPS0	= 0	; ADC  Prescaler Select Bits
                                 .equ	ADPS1	= 1	; ADC  Prescaler Select Bits
                                 .equ	ADPS2	= 2	; ADC  Prescaler Select Bits
                                 .equ	ADIE	= 3	; ADC Interrupt Enable
                                 .equ	ADIF	= 4	; ADC Interrupt Flag
                                 .equ	ADATE	= 5	; ADC  Auto Trigger Enable
                                 .equ	ADSC	= 6	; ADC Start Conversion
                                 .equ	ADEN	= 7	; ADC Enable
                                 
                                 ; ADCSRB - The ADC Control and Status register B
                                 .equ	ADTS0	= 0	; ADC Auto Trigger Source bit 0
                                 .equ	ADTS1	= 1	; ADC Auto Trigger Source bit 1
                                 .equ	ADTS2	= 2	; ADC Auto Trigger Source bit 2
                                 .equ	ACME	= 6	; 
                                 
                                 ; ADCH - ADC Data Register High Byte
                                 .equ	ADCH0	= 0	; ADC Data Register High Byte Bit 0
                                 .equ	ADCH1	= 1	; ADC Data Register High Byte Bit 1
                                 .equ	ADCH2	= 2	; ADC Data Register High Byte Bit 2
                                 .equ	ADCH3	= 3	; ADC Data Register High Byte Bit 3
                                 .equ	ADCH4	= 4	; ADC Data Register High Byte Bit 4
                                 .equ	ADCH5	= 5	; ADC Data Register High Byte Bit 5
                                 .equ	ADCH6	= 6	; ADC Data Register High Byte Bit 6
                                 .equ	ADCH7	= 7	; ADC Data Register High Byte Bit 7
                                 
                                 ; ADCL - ADC Data Register Low Byte
                                 .equ	ADCL0	= 0	; ADC Data Register Low Byte Bit 0
                                 .equ	ADCL1	= 1	; ADC Data Register Low Byte Bit 1
                                 .equ	ADCL2	= 2	; ADC Data Register Low Byte Bit 2
                                 .equ	ADCL3	= 3	; ADC Data Register Low Byte Bit 3
                                 .equ	ADCL4	= 4	; ADC Data Register Low Byte Bit 4
                                 .equ	ADCL5	= 5	; ADC Data Register Low Byte Bit 5
                                 .equ	ADCL6	= 6	; ADC Data Register Low Byte Bit 6
                                 .equ	ADCL7	= 7	; ADC Data Register Low Byte Bit 7
                                 
                                 ; DIDR0 - Digital Input Disable Register
                                 .equ	ADC0D	= 0	; 
                                 .equ	ADC1D	= 1	; 
                                 .equ	ADC2D	= 2	; 
                                 .equ	ADC3D	= 3	; 
                                 .equ	ADC4D	= 4	; 
                                 .equ	ADC5D	= 5	; 
                                 
                                 
                                 ; ***** ANALOG_COMPARATOR ************
                                 ; ACSR - Analog Comparator Control And Status Register
                                 .equ	ACIS0	= 0	; Analog Comparator Interrupt Mode Select bit 0
                                 .equ	ACIS1	= 1	; Analog Comparator Interrupt Mode Select bit 1
                                 .equ	ACIC	= 2	; Analog Comparator Input Capture Enable
                                 .equ	ACIE	= 3	; Analog Comparator Interrupt Enable
                                 .equ	ACI	= 4	; Analog Comparator Interrupt Flag
                                 .equ	ACO	= 5	; Analog Compare Output
                                 .equ	ACBG	= 6	; Analog Comparator Bandgap Select
                                 .equ	ACD	= 7	; Analog Comparator Disable
                                 
                                 ; DIDR1 - Digital Input Disable Register 1
                                 .equ	AIN0D	= 0	; AIN0 Digital Input Disable
                                 .equ	AIN1D	= 1	; AIN1 Digital Input Disable
                                 
                                 
                                 ; ***** PORTB ************************
                                 ; PORTB - Port B Data Register
                                 .equ	PORTB0	= 0	; Port B Data Register bit 0
                                 .equ	PB0	= 0	; For compatibility
                                 .equ	PORTB1	= 1	; Port B Data Register bit 1
                                 .equ	PB1	= 1	; For compatibility
                                 .equ	PORTB2	= 2	; Port B Data Register bit 2
                                 .equ	PB2	= 2	; For compatibility
                                 .equ	PORTB3	= 3	; Port B Data Register bit 3
                                 .equ	PB3	= 3	; For compatibility
                                 .equ	PORTB4	= 4	; Port B Data Register bit 4
                                 .equ	PB4	= 4	; For compatibility
                                 .equ	PORTB5	= 5	; Port B Data Register bit 5
                                 .equ	PB5	= 5	; For compatibility
                                 .equ	PORTB6	= 6	; Port B Data Register bit 6
                                 .equ	PB6	= 6	; For compatibility
                                 .equ	PORTB7	= 7	; Port B Data Register bit 7
                                 .equ	PB7	= 7	; For compatibility
                                 
                                 ; DDRB - Port B Data Direction Register
                                 .equ	DDB0	= 0	; Port B Data Direction Register bit 0
                                 .equ	DDB1	= 1	; Port B Data Direction Register bit 1
                                 .equ	DDB2	= 2	; Port B Data Direction Register bit 2
                                 .equ	DDB3	= 3	; Port B Data Direction Register bit 3
                                 .equ	DDB4	= 4	; Port B Data Direction Register bit 4
                                 .equ	DDB5	= 5	; Port B Data Direction Register bit 5
                                 .equ	DDB6	= 6	; Port B Data Direction Register bit 6
                                 .equ	DDB7	= 7	; Port B Data Direction Register bit 7
                                 
                                 ; PINB - Port B Input Pins
                                 .equ	PINB0	= 0	; Port B Input Pins bit 0
                                 .equ	PINB1	= 1	; Port B Input Pins bit 1
                                 .equ	PINB2	= 2	; Port B Input Pins bit 2
                                 .equ	PINB3	= 3	; Port B Input Pins bit 3
                                 .equ	PINB4	= 4	; Port B Input Pins bit 4
                                 .equ	PINB5	= 5	; Port B Input Pins bit 5
                                 .equ	PINB6	= 6	; Port B Input Pins bit 6
                                 .equ	PINB7	= 7	; Port B Input Pins bit 7
                                 
                                 
                                 ; ***** PORTC ************************
                                 ; PORTC - Port C Data Register
                                 .equ	PORTC0	= 0	; Port C Data Register bit 0
                                 .equ	PC0	= 0	; For compatibility
                                 .equ	PORTC1	= 1	; Port C Data Register bit 1
                                 .equ	PC1	= 1	; For compatibility
                                 .equ	PORTC2	= 2	; Port C Data Register bit 2
                                 .equ	PC2	= 2	; For compatibility
                                 .equ	PORTC3	= 3	; Port C Data Register bit 3
                                 .equ	PC3	= 3	; For compatibility
                                 .equ	PORTC4	= 4	; Port C Data Register bit 4
                                 .equ	PC4	= 4	; For compatibility
                                 .equ	PORTC5	= 5	; Port C Data Register bit 5
                                 .equ	PC5	= 5	; For compatibility
                                 .equ	PORTC6	= 6	; Port C Data Register bit 6
                                 .equ	PC6	= 6	; For compatibility
                                 
                                 ; DDRC - Port C Data Direction Register
                                 .equ	DDC0	= 0	; Port C Data Direction Register bit 0
                                 .equ	DDC1	= 1	; Port C Data Direction Register bit 1
                                 .equ	DDC2	= 2	; Port C Data Direction Register bit 2
                                 .equ	DDC3	= 3	; Port C Data Direction Register bit 3
                                 .equ	DDC4	= 4	; Port C Data Direction Register bit 4
                                 .equ	DDC5	= 5	; Port C Data Direction Register bit 5
                                 .equ	DDC6	= 6	; Port C Data Direction Register bit 6
                                 
                                 ; PINC - Port C Input Pins
                                 .equ	PINC0	= 0	; Port C Input Pins bit 0
                                 .equ	PINC1	= 1	; Port C Input Pins bit 1
                                 .equ	PINC2	= 2	; Port C Input Pins bit 2
                                 .equ	PINC3	= 3	; Port C Input Pins bit 3
                                 .equ	PINC4	= 4	; Port C Input Pins bit 4
                                 .equ	PINC5	= 5	; Port C Input Pins bit 5
                                 .equ	PINC6	= 6	; Port C Input Pins bit 6
                                 
                                 
                                 ; ***** PORTD ************************
                                 ; PORTD - Port D Data Register
                                 .equ	PORTD0	= 0	; Port D Data Register bit 0
                                 .equ	PD0	= 0	; For compatibility
                                 .equ	PORTD1	= 1	; Port D Data Register bit 1
                                 .equ	PD1	= 1	; For compatibility
                                 .equ	PORTD2	= 2	; Port D Data Register bit 2
                                 .equ	PD2	= 2	; For compatibility
                                 .equ	PORTD3	= 3	; Port D Data Register bit 3
                                 .equ	PD3	= 3	; For compatibility
                                 .equ	PORTD4	= 4	; Port D Data Register bit 4
                                 .equ	PD4	= 4	; For compatibility
                                 .equ	PORTD5	= 5	; Port D Data Register bit 5
                                 .equ	PD5	= 5	; For compatibility
                                 .equ	PORTD6	= 6	; Port D Data Register bit 6
                                 .equ	PD6	= 6	; For compatibility
                                 .equ	PORTD7	= 7	; Port D Data Register bit 7
                                 .equ	PD7	= 7	; For compatibility
                                 
                                 ; DDRD - Port D Data Direction Register
                                 .equ	DDD0	= 0	; Port D Data Direction Register bit 0
                                 .equ	DDD1	= 1	; Port D Data Direction Register bit 1
                                 .equ	DDD2	= 2	; Port D Data Direction Register bit 2
                                 .equ	DDD3	= 3	; Port D Data Direction Register bit 3
                                 .equ	DDD4	= 4	; Port D Data Direction Register bit 4
                                 .equ	DDD5	= 5	; Port D Data Direction Register bit 5
                                 .equ	DDD6	= 6	; Port D Data Direction Register bit 6
                                 .equ	DDD7	= 7	; Port D Data Direction Register bit 7
                                 
                                 ; PIND - Port D Input Pins
                                 .equ	PIND0	= 0	; Port D Input Pins bit 0
                                 .equ	PIND1	= 1	; Port D Input Pins bit 1
                                 .equ	PIND2	= 2	; Port D Input Pins bit 2
                                 .equ	PIND3	= 3	; Port D Input Pins bit 3
                                 .equ	PIND4	= 4	; Port D Input Pins bit 4
                                 .equ	PIND5	= 5	; Port D Input Pins bit 5
                                 .equ	PIND6	= 6	; Port D Input Pins bit 6
                                 .equ	PIND7	= 7	; Port D Input Pins bit 7
                                 
                                 
                                 ; ***** TIMER_COUNTER_0 **************
                                 ; TIMSK0 - Timer/Counter0 Interrupt Mask Register
                                 .equ	TOIE0	= 0	; Timer/Counter0 Overflow Interrupt Enable
                                 .equ	OCIE0A	= 1	; Timer/Counter0 Output Compare Match A Interrupt Enable
                                 .equ	OCIE0B	= 2	; Timer/Counter0 Output Compare Match B Interrupt Enable
                                 
                                 ; TIFR0 - Timer/Counter0 Interrupt Flag register
                                 .equ	TOV0	= 0	; Timer/Counter0 Overflow Flag
                                 .equ	OCF0A	= 1	; Timer/Counter0 Output Compare Flag 0A
                                 .equ	OCF0B	= 2	; Timer/Counter0 Output Compare Flag 0B
                                 
                                 ; TCCR0A - Timer/Counter  Control Register A
                                 .equ	WGM00	= 0	; Waveform Generation Mode
                                 .equ	WGM01	= 1	; Waveform Generation Mode
                                 .equ	COM0B0	= 4	; Compare Output Mode, Fast PWm
                                 .equ	COM0B1	= 5	; Compare Output Mode, Fast PWm
                                 .equ	COM0A0	= 6	; Compare Output Mode, Phase Correct PWM Mode
                                 .equ	COM0A1	= 7	; Compare Output Mode, Phase Correct PWM Mode
                                 
                                 ; TCCR0B - Timer/Counter Control Register B
                                 .equ	CS00	= 0	; Clock Select
                                 .equ	CS01	= 1	; Clock Select
                                 .equ	CS02	= 2	; Clock Select
                                 .equ	WGM02	= 3	; 
                                 .equ	FOC0B	= 6	; Force Output Compare B
                                 .equ	FOC0A	= 7	; Force Output Compare A
                                 
                                 ; TCNT0 - Timer/Counter0
                                 .equ	TCNT0_0	= 0	; 
                                 .equ	TCNT0_1	= 1	; 
                                 .equ	TCNT0_2	= 2	; 
                                 .equ	TCNT0_3	= 3	; 
                                 .equ	TCNT0_4	= 4	; 
                                 .equ	TCNT0_5	= 5	; 
                                 .equ	TCNT0_6	= 6	; 
                                 .equ	TCNT0_7	= 7	; 
                                 
                                 ; OCR0A - Timer/Counter0 Output Compare Register
                                 .equ	OCR0A_0	= 0	; 
                                 .equ	OCR0A_1	= 1	; 
                                 .equ	OCR0A_2	= 2	; 
                                 .equ	OCR0A_3	= 3	; 
                                 .equ	OCR0A_4	= 4	; 
                                 .equ	OCR0A_5	= 5	; 
                                 .equ	OCR0A_6	= 6	; 
                                 .equ	OCR0A_7	= 7	; 
                                 
                                 ; OCR0B - Timer/Counter0 Output Compare Register
                                 .equ	OCR0B_0	= 0	; 
                                 .equ	OCR0B_1	= 1	; 
                                 .equ	OCR0B_2	= 2	; 
                                 .equ	OCR0B_3	= 3	; 
                                 .equ	OCR0B_4	= 4	; 
                                 .equ	OCR0B_5	= 5	; 
                                 .equ	OCR0B_6	= 6	; 
                                 .equ	OCR0B_7	= 7	; 
                                 
                                 ; GTCCR - General Timer/Counter Control Register
                                 ;.equ	PSRSYNC	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                                 .equ	PSR10	= PSRSYNC	; For compatibility
                                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** EXTERNAL_INTERRUPT ***********
                                 ; EICRA - External Interrupt Control Register
                                 .equ	ISC00	= 0	; External Interrupt Sense Control 0 Bit 0
                                 .equ	ISC01	= 1	; External Interrupt Sense Control 0 Bit 1
                                 .equ	ISC10	= 2	; External Interrupt Sense Control 1 Bit 0
                                 .equ	ISC11	= 3	; External Interrupt Sense Control 1 Bit 1
                                 
                                 ; EIMSK - External Interrupt Mask Register
                                 .equ	INT0	= 0	; External Interrupt Request 0 Enable
                                 .equ	INT1	= 1	; External Interrupt Request 1 Enable
                                 
                                 ; EIFR - External Interrupt Flag Register
                                 .equ	INTF0	= 0	; External Interrupt Flag 0
                                 .equ	INTF1	= 1	; External Interrupt Flag 1
                                 
                                 ; PCICR - Pin Change Interrupt Control Register
                                 .equ	PCIE0	= 0	; Pin Change Interrupt Enable 0
                                 .equ	PCIE1	= 1	; Pin Change Interrupt Enable 1
                                 .equ	PCIE2	= 2	; Pin Change Interrupt Enable 2
                                 
                                 ; PCMSK2 - Pin Change Mask Register 2
                                 .equ	PCINT16	= 0	; Pin Change Enable Mask 16
                                 .equ	PCINT17	= 1	; Pin Change Enable Mask 17
                                 .equ	PCINT18	= 2	; Pin Change Enable Mask 18
                                 .equ	PCINT19	= 3	; Pin Change Enable Mask 19
                                 .equ	PCINT20	= 4	; Pin Change Enable Mask 20
                                 .equ	PCINT21	= 5	; Pin Change Enable Mask 21
                                 .equ	PCINT22	= 6	; Pin Change Enable Mask 22
                                 .equ	PCINT23	= 7	; Pin Change Enable Mask 23
                                 
                                 ; PCMSK1 - Pin Change Mask Register 1
                                 .equ	PCINT8	= 0	; Pin Change Enable Mask 8
                                 .equ	PCINT9	= 1	; Pin Change Enable Mask 9
                                 .equ	PCINT10	= 2	; Pin Change Enable Mask 10
                                 .equ	PCINT11	= 3	; Pin Change Enable Mask 11
                                 .equ	PCINT12	= 4	; Pin Change Enable Mask 12
                                 .equ	PCINT13	= 5	; Pin Change Enable Mask 13
                                 .equ	PCINT14	= 6	; Pin Change Enable Mask 14
                                 
                                 ; PCMSK0 - Pin Change Mask Register 0
                                 .equ	PCINT0	= 0	; Pin Change Enable Mask 0
                                 .equ	PCINT1	= 1	; Pin Change Enable Mask 1
                                 .equ	PCINT2	= 2	; Pin Change Enable Mask 2
                                 .equ	PCINT3	= 3	; Pin Change Enable Mask 3
                                 .equ	PCINT4	= 4	; Pin Change Enable Mask 4
                                 .equ	PCINT5	= 5	; Pin Change Enable Mask 5
                                 .equ	PCINT6	= 6	; Pin Change Enable Mask 6
                                 .equ	PCINT7	= 7	; Pin Change Enable Mask 7
                                 
                                 ; PCIFR - Pin Change Interrupt Flag Register
                                 .equ	PCIF0	= 0	; Pin Change Interrupt Flag 0
                                 .equ	PCIF1	= 1	; Pin Change Interrupt Flag 1
                                 .equ	PCIF2	= 2	; Pin Change Interrupt Flag 2
                                 
                                 
                                 ; ***** SPI **************************
                                 ; SPDR - SPI Data Register
                                 .equ	SPDR0	= 0	; SPI Data Register bit 0
                                 .equ	SPDR1	= 1	; SPI Data Register bit 1
                                 .equ	SPDR2	= 2	; SPI Data Register bit 2
                                 .equ	SPDR3	= 3	; SPI Data Register bit 3
                                 .equ	SPDR4	= 4	; SPI Data Register bit 4
                                 .equ	SPDR5	= 5	; SPI Data Register bit 5
                                 .equ	SPDR6	= 6	; SPI Data Register bit 6
                                 .equ	SPDR7	= 7	; SPI Data Register bit 7
                                 
                                 ; SPSR - SPI Status Register
                                 .equ	SPI2X	= 0	; Double SPI Speed Bit
                                 .equ	WCOL	= 6	; Write Collision Flag
                                 .equ	SPIF	= 7	; SPI Interrupt Flag
                                 
                                 ; SPCR - SPI Control Register
                                 .equ	SPR0	= 0	; SPI Clock Rate Select 0
                                 .equ	SPR1	= 1	; SPI Clock Rate Select 1
                                 .equ	CPHA	= 2	; Clock Phase
                                 .equ	CPOL	= 3	; Clock polarity
                                 .equ	MSTR	= 4	; Master/Slave Select
                                 .equ	DORD	= 5	; Data Order
                                 .equ	SPE	= 6	; SPI Enable
                                 .equ	SPIE	= 7	; SPI Interrupt Enable
                                 
                                 
                                 ; ***** WATCHDOG *********************
                                 ; WDTCSR - Watchdog Timer Control Register
                                 .equ	WDP0	= 0	; Watch Dog Timer Prescaler bit 0
                                 .equ	WDP1	= 1	; Watch Dog Timer Prescaler bit 1
                                 .equ	WDP2	= 2	; Watch Dog Timer Prescaler bit 2
                                 .equ	WDE	= 3	; Watch Dog Enable
                                 .equ	WDCE	= 4	; Watchdog Change Enable
                                 .equ	WDP3	= 5	; Watchdog Timer Prescaler Bit 3
                                 .equ	WDIE	= 6	; Watchdog Timeout Interrupt Enable
                                 .equ	WDIF	= 7	; Watchdog Timeout Interrupt Flag
                                 
                                 
                                 ; ***** CPU **************************
                                 ; SREG - Status Register
                                 .equ	SREG_C	= 0	; Carry Flag
                                 .equ	SREG_Z	= 1	; Zero Flag
                                 .equ	SREG_N	= 2	; Negative Flag
                                 .equ	SREG_V	= 3	; Two's Complement Overflow Flag
                                 .equ	SREG_S	= 4	; Sign Bit
                                 .equ	SREG_H	= 5	; Half Carry Flag
                                 .equ	SREG_T	= 6	; Bit Copy Storage
                                 .equ	SREG_I	= 7	; Global Interrupt Enable
                                 
                                 ; OSCCAL - Oscillator Calibration Value
                                 .equ	CAL0	= 0	; Oscillator Calibration Value Bit0
                                 .equ	CAL1	= 1	; Oscillator Calibration Value Bit1
                                 .equ	CAL2	= 2	; Oscillator Calibration Value Bit2
                                 .equ	CAL3	= 3	; Oscillator Calibration Value Bit3
                                 .equ	CAL4	= 4	; Oscillator Calibration Value Bit4
                                 .equ	CAL5	= 5	; Oscillator Calibration Value Bit5
                                 .equ	CAL6	= 6	; Oscillator Calibration Value Bit6
                                 .equ	CAL7	= 7	; Oscillator Calibration Value Bit7
                                 
                                 ; CLKPR - Clock Prescale Register
                                 .equ	CLKPS0	= 0	; Clock Prescaler Select Bit 0
                                 .equ	CLKPS1	= 1	; Clock Prescaler Select Bit 1
                                 .equ	CLKPS2	= 2	; Clock Prescaler Select Bit 2
                                 .equ	CLKPS3	= 3	; Clock Prescaler Select Bit 3
                                 .equ	CLKPCE	= 7	; Clock Prescaler Change Enable
                                 
                                 ; SPMCSR - Store Program Memory Control and Status Register
                                 .equ    SELFPRGEN = 0; Added for backwards compatibility
                                 .equ	SPMEN	= 0	; Store Program Memory
                                 .equ	PGERS	= 1	; Page Erase
                                 .equ	PGWRT	= 2	; Page Write
                                 .equ	BLBSET	= 3	; Boot Lock Bit Set
                                 .equ	RWWSRE	= 4	; Read-While-Write section read enable
                                 .equ    SIGRD   = 5 ; Signature Row Read
                                 .equ	RWWSB	= 6	; Read-While-Write Section Busy
                                 .equ	SPMIE	= 7	; SPM Interrupt Enable
                                 
                                 ; MCUCR - MCU Control Register
                                 .equ	IVCE	= 0	; 
                                 .equ	IVSEL	= 1	; 
                                 .equ	PUD	= 4	; 
                                 .equ	BODSE	= 5	; BOD Sleep Enable
                                 .equ	BODS	= 6	; BOD Sleep
                                 
                                 ; MCUSR - MCU Status Register
                                 .equ	PORF	= 0	; Power-on reset flag
                                 .equ	EXTRF	= 1	; External Reset Flag
                                 .equ	EXTREF	= EXTRF	; For compatibility
                                 .equ	BORF	= 2	; Brown-out Reset Flag
                                 .equ	WDRF	= 3	; Watchdog Reset Flag
                                 
                                 ; SMCR - Sleep Mode Control Register
                                 .equ	SE	= 0	; Sleep Enable
                                 .equ	SM0	= 1	; Sleep Mode Select Bit 0
                                 .equ	SM1	= 2	; Sleep Mode Select Bit 1
                                 .equ	SM2	= 3	; Sleep Mode Select Bit 2
                                 
                                 ; GPIOR2 - General Purpose I/O Register 2
                                 .equ	GPIOR20	= 0	; 
                                 .equ	GPIOR21	= 1	; 
                                 .equ	GPIOR22	= 2	; 
                                 .equ	GPIOR23	= 3	; 
                                 .equ	GPIOR24	= 4	; 
                                 .equ	GPIOR25	= 5	; 
                                 .equ	GPIOR26	= 6	; 
                                 .equ	GPIOR27	= 7	; 
                                 
                                 ; GPIOR1 - General Purpose I/O Register 1
                                 .equ	GPIOR10	= 0	; 
                                 .equ	GPIOR11	= 1	; 
                                 .equ	GPIOR12	= 2	; 
                                 .equ	GPIOR13	= 3	; 
                                 .equ	GPIOR14	= 4	; 
                                 .equ	GPIOR15	= 5	; 
                                 .equ	GPIOR16	= 6	; 
                                 .equ	GPIOR17	= 7	; 
                                 
                                 ; GPIOR0 - General Purpose I/O Register 0
                                 .equ	GPIOR00	= 0	; 
                                 .equ	GPIOR01	= 1	; 
                                 .equ	GPIOR02	= 2	; 
                                 .equ	GPIOR03	= 3	; 
                                 .equ	GPIOR04	= 4	; 
                                 .equ	GPIOR05	= 5	; 
                                 .equ	GPIOR06	= 6	; 
                                 .equ	GPIOR07	= 7	; 
                                 
                                 ; PRR - Power Reduction Register
                                 .equ	PRADC	= 0	; Power Reduction ADC
                                 .equ	PRUSART0	= 1	; Power Reduction USART
                                 .equ	PRSPI	= 2	; Power Reduction Serial Peripheral Interface
                                 .equ	PRTIM1	= 3	; Power Reduction Timer/Counter1
                                 .equ	PRTIM0	= 5	; Power Reduction Timer/Counter0
                                 .equ	PRTIM2	= 6	; Power Reduction Timer/Counter2
                                 .equ	PRTWI	= 7	; Power Reduction TWI
                                 
                                 
                                 ; ***** EEPROM ***********************
                                 ; EEARL - EEPROM Address Register Low Byte
                                 .equ	EEAR0	= 0	; EEPROM Read/Write Access Bit 0
                                 .equ	EEAR1	= 1	; EEPROM Read/Write Access Bit 1
                                 .equ	EEAR2	= 2	; EEPROM Read/Write Access Bit 2
                                 .equ	EEAR3	= 3	; EEPROM Read/Write Access Bit 3
                                 .equ	EEAR4	= 4	; EEPROM Read/Write Access Bit 4
                                 .equ	EEAR5	= 5	; EEPROM Read/Write Access Bit 5
                                 .equ	EEAR6	= 6	; EEPROM Read/Write Access Bit 6
                                 .equ	EEAR7	= 7	; EEPROM Read/Write Access Bit 7
                                 
                                 ; EEARH - EEPROM Address Register High Byte
                                 .equ	EEAR8	= 0	; EEPROM Read/Write Access Bit 8
                                 .equ	EEAR9	= 1	; EEPROM Read/Write Access Bit 9
                                 
                                 ; EEDR - EEPROM Data Register
                                 .equ	EEDR0	= 0	; EEPROM Data Register bit 0
                                 .equ	EEDR1	= 1	; EEPROM Data Register bit 1
                                 .equ	EEDR2	= 2	; EEPROM Data Register bit 2
                                 .equ	EEDR3	= 3	; EEPROM Data Register bit 3
                                 .equ	EEDR4	= 4	; EEPROM Data Register bit 4
                                 .equ	EEDR5	= 5	; EEPROM Data Register bit 5
                                 .equ	EEDR6	= 6	; EEPROM Data Register bit 6
                                 .equ	EEDR7	= 7	; EEPROM Data Register bit 7
                                 
                                 ; EECR - EEPROM Control Register
                                 .equ	EERE	= 0	; EEPROM Read Enable
                                 .equ	EEPE	= 1	; EEPROM Write Enable
                                 .equ	EEMPE	= 2	; EEPROM Master Write Enable
                                 .equ	EERIE	= 3	; EEPROM Ready Interrupt Enable
                                 .equ	EEPM0	= 4	; EEPROM Programming Mode Bit 0
                                 .equ	EEPM1	= 5	; EEPROM Programming Mode Bit 1
                                 
                                 
                                 
                                 ; ***** LOCKSBITS ********************************************************
                                 .equ	LB1	= 0	; Lock bit
                                 .equ	LB2	= 1	; Lock bit
                                 .equ	BLB01	= 2	; Boot Lock bit
                                 .equ	BLB02	= 3	; Boot Lock bit
                                 .equ	BLB11	= 4	; Boot lock bit
                                 .equ	BLB12	= 5	; Boot lock bit
                                 
                                 
                                 ; ***** FUSES ************************************************************
                                 ; LOW fuse bits
                                 .equ	CKSEL0	= 0	; Select Clock Source
                                 .equ	CKSEL1	= 1	; Select Clock Source
                                 .equ	CKSEL2	= 2	; Select Clock Source
                                 .equ	CKSEL3	= 3	; Select Clock Source
                                 .equ	SUT0	= 4	; Select start-up time
                                 .equ	SUT1	= 5	; Select start-up time
                                 .equ	CKOUT	= 6	; Clock output
                                 .equ	CKDIV8	= 7	; Divide clock by 8
                                 
                                 ; HIGH fuse bits
                                 .equ	BOOTRST	= 0	; Select reset vector
                                 .equ	BOOTSZ0	= 1	; Select boot size
                                 .equ	BOOTSZ1	= 2	; Select boot size
                                 .equ	EESAVE	= 3	; EEPROM memory is preserved through chip erase
                                 .equ	WDTON	= 4	; Watchdog Timer Always On
                                 .equ	SPIEN	= 5	; Enable Serial programming and Data Downloading
                                 .equ	DWEN	= 6	; debugWIRE Enable
                                 .equ	RSTDISBL	= 7	; External reset disable
                                 
                                 ; EXTENDED fuse bits
                                 .equ	BODLEVEL0	= 0	; Brown-out Detector trigger level
                                 .equ	BODLEVEL1	= 1	; Brown-out Detector trigger level
                                 .equ	BODLEVEL2	= 2	; Brown-out Detector trigger level
                                 
                                 
                                 
                                 ; ***** CPU REGISTER DEFINITIONS *****************************************
                                 .def	XH	= r27
                                 .def	XL	= r26
                                 .def	YH	= r29
                                 .def	YL	= r28
                                 .def	ZH	= r31
                                 .def	ZL	= r30
                                 
                                 
                                 
                                 ; ***** DATA MEMORY DECLARATIONS *****************************************
                                 .equ	FLASHEND	= 0x3fff	; Note: Word address
                                 .equ	IOEND	= 0x00ff
                                 .equ	SRAM_START	= 0x0100
                                 .equ	SRAM_SIZE	= 2048
                                 .equ	RAMEND	= 0x08ff
                                 .equ	XRAMEND	= 0x0000
                                 .equ	E2END	= 0x03ff
                                 .equ	EEPROMEND	= 0x03ff
                                 .equ	EEADRBITS	= 10
                                 #pragma AVRPART MEMORY PROG_FLASH 32768
                                 #pragma AVRPART MEMORY EEPROM 1024
                                 #pragma AVRPART MEMORY INT_SRAM SIZE 2048
                                 #pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                                 
                                 
                                 
                                 ; ***** BOOTLOADER DECLARATIONS ******************************************
                                 .equ	NRWW_START_ADDR	= 0x3800
                                 .equ	NRWW_STOP_ADDR	= 0x3fff
                                 .equ	RWW_START_ADDR	= 0x0
                                 .equ	RWW_STOP_ADDR	= 0x37ff
                                 .equ	PAGESIZE	= 64
                                 .equ	FIRSTBOOTSTART	= 0x3f00
                                 .equ	SECONDBOOTSTART	= 0x3e00
                                 .equ	THIRDBOOTSTART	= 0x3c00
                                 .equ	FOURTHBOOTSTART	= 0x3800
                                 .equ	SMALLBOOTSTART	= FIRSTBOOTSTART
                                 .equ	LARGEBOOTSTART	= FOURTHBOOTSTART
                                 
                                 
                                 
                                 ; ***** INTERRUPT VECTORS ************************************************
                                 .equ	INT0addr	= 0x0002	; External Interrupt Request 0
                                 .equ	INT1addr	= 0x0004	; External Interrupt Request 1
                                 .equ	PCI0addr	= 0x0006	; Pin Change Interrupt Request 0
                                 .equ	PCI1addr	= 0x0008	; Pin Change Interrupt Request 0
                                 .equ	PCI2addr	= 0x000a	; Pin Change Interrupt Request 1
                                 .equ	WDTaddr	= 0x000c	; Watchdog Time-out Interrupt
                                 .equ	OC2Aaddr	= 0x000e	; Timer/Counter2 Compare Match A
                                 .equ	OC2Baddr	= 0x0010	; Timer/Counter2 Compare Match A
                                 .equ	OVF2addr	= 0x0012	; Timer/Counter2 Overflow
                                 .equ	ICP1addr	= 0x0014	; Timer/Counter1 Capture Event
                                 .equ	OC1Aaddr	= 0x0016	; Timer/Counter1 Compare Match A
                                 .equ	OC1Baddr	= 0x0018	; Timer/Counter1 Compare Match B
                                 .equ	OVF1addr	= 0x001a	; Timer/Counter1 Overflow
                                 .equ	OC0Aaddr	= 0x001c	; TimerCounter0 Compare Match A
                                 .equ	OC0Baddr	= 0x001e	; TimerCounter0 Compare Match B
                                 .equ	OVF0addr	= 0x0020	; Timer/Couner0 Overflow
                                 .equ	SPIaddr	= 0x0022	; SPI Serial Transfer Complete
                                 .equ	URXCaddr	= 0x0024	; USART Rx Complete
                                 .equ	UDREaddr	= 0x0026	; USART, Data Register Empty
                                 .equ	UTXCaddr	= 0x0028	; USART Tx Complete
                                 .equ	ADCCaddr	= 0x002a	; ADC Conversion Complete
                                 .equ	ERDYaddr	= 0x002c	; EEPROM Ready
                                 .equ	ACIaddr	= 0x002e	; Analog Comparator
                                 .equ	TWIaddr	= 0x0030	; Two-wire Serial Interface
                                 .equ	SPMRaddr	= 0x0032	; Store Program Memory Read
                                 
                                 .equ	INT_VECTORS_SIZE	= 52	; size in words
                                 
                                 #endif  /* _M328PDEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 
                                 ; Ejercicio1-Parcial2.asm
                                 ;
                                 ; Created: 24/10/2022 4:54:32
                                 ; Author : Lautaro Ezequiel Ubiedo
                                 ;
                                 
                                 
                                 ; Replace with your application code
                                 .ifndef F_CPU
                                 .set F_CPU = 16000000
                                 .endif
                                 
                                 ;===========================================
                                 ; Declarations for register
                                 .def temp = r16
                                 .def overflows = r17
                                 
                                 ;===========================================
                                 ; Declarations for label
                                 .set FLAGS0 = GPIOR0
                                 .set COMM_PC = 0
                                 .set COMM_Rsp = 1
                                 .set UpdateOCR0A = 2
                                 
                                 ;===========================================
                                 ; Data Segment
                                 .dseg
000100 24
000101 54
000102 44
000103 49
000104 49
000105 2c
000106 43
000107 48
000108 41
000109 2c
00010a 25                        CadenaRp: .db "$TDII,CHA,%" 
                                 //Dejando 3 lugares para el número, en total son 16bytes
00010b 00
00010c 02
00010d 05
00010e 07
00010f 0a
000110 0c
000111 0f
000112 11
000113 14
000114 16
000115 19
000116 1b
000117 1e
000118 20
000119 23
00011a 25
00011b 28
00011c 2a
00011d 2d
00011e 2f
00011f 32
000120 34
000121 37
000122 39
000123 3c
000124 3e
000125 41
000126 43
000127 46
000128 48
000129 4b
00012a 4d
00012b 50
00012c 52
00012d 55
00012e 57
00012f 5a
000130 5c
000131 5f
000132 61
000133 64
000134 66
000135 69
000136 6b
000137 6e
000138 70
000139 73
00013a 75
00013b 78
00013c 7a
00013d 7d
00013e 7f
00013f 82
000140 84
000141 87
000142 89
000143 8c
000144 8e
000145 91
000146 93
000147 96
000148 98
000149 9b
00014a 9d
00014b a0
00014c a2
00014d a5
00014e a7
00014f aa
000150 ac
000151 af
000152 b1
000153 b4
000154 b6
000155 b9
000156 bb
000157 be
000158 c0
000159 c3
00015a c5
00015b c8
00015c ca
00015d cd
00015e cf
00015f d2
000160 d4
000161 d7
000162 d9
000163 dc
000164 de
000165 e1
000166 e3
000167 e6
000168 e8
000169 eb
00016a ed
00016b f0
00016c f2
00016d f5
00016e ff                        pwm_table: .db 0,2,5,7,10,12,15,17,20,22,25,27,30,32,35,37,40,42,45,47,50,52,55,57,60,62,65,67,70,72,75,77,80,82,85,87,90,92,95,97,100,102,105,107,110,112,115,117,120,122,125,127,130,132,135,137,140,142,145,147,150,152,155,157,160,162,165,167,170,172,175,00016f                           177,180,182,185,187,190,192,195,197,200,202,205,207,210,212,215,217,220,222,225,227,230,232,235,237,240,242,245,255
000170                           VAL_PWM: .byte 1 //valor del PWM en %
000171                           Temp_OCR0A: .byte 1 //Valor temporal del registro OCR0A
000172                           BCDR0: .byte 1
000173                           BCDR1: .byte 1
000174                           BCDR2: .byte 1
000175                           BCDdigit: .byte 1
000176                           indexRx: .byte 1 //índice dentro del buffer de recepción
                                 BUFFER: .byte 35 //buffer de datos de tx/rx a/desde la PC
                                 
                                 ;===========================================
                                 ; Code Segment
                                 .cseg
000000 c079                      .org RWW_START_ADDR       ; memory (PC) location of reset handler
                                 rjmp Reset           
                                 
000002 c030                      .org INT0addr ; memory location of External Interrupt Request 0
                                 rjmp isr_INT0_handler ; go here if a External Interrupt 0 occurs 
                                 
000004 c02f                      .org INT1addr ; memory location of External Interrupt Request 1
                                 rjmp isr_INT1_handler ; go here if a External Interrupt 1 occurs 
                                 
000006 c02e                      .org PCI0addr ; memory location of Pin Change Interrupt Request 0
                                 rjmp isr_PCI0_handler ; go here if a Pin Change Interrupt 0 occurs 
                                 
000008 c02d                      .org PCI1addr ; memory location of Pin Change Interrupt Request 1
                                 rjmp isr_PCI1_handler ; go here if a Pin Change Interrupt 1 occurs 
                                 
00000a c02c                      .org PCI2addr ; memory location of Pin Change Interrupt Request 2
                                 rjmp isr_PCI2_handler ; go here if a Pin Change Interrupt 2 occurs 
                                 
00000c c02b                      .org WDTaddr ; memory location of Watchdog Time-out Interrupt
                                 rjmp isr_WDT_handler ; go here if a Watchdog Time-out Interrupt occurs 
                                 
00000e c02a                      .org OC2Aaddr ; memory location of Timer/Counter2 Compare Match A Interrupt
                                 rjmp isr_OC2A_handler ; go here if a Timer/Counter2 Compare Match A Interrupt occurs 
                                 
000010 c029                      .org OC2Baddr ; memory location of Timer/Counter2 Compare Match B Interrupt
                                 rjmp isr_OC2B_handler ; go here if a Timer/Counter2 Compare Match B Interrupt occurs 
                                 
000012 c028                      .org OVF2addr ; memory location of Timer/Counter2 Overflow Interrupt
                                 rjmp isr_OVF2_handler ; go here if a Timer/Counter2 Overflow Interrupt occurs 
                                 
000014 c027                      .org ICP1addr ; memory location of Timer/Counter1 Capture Event Interrupt
                                 rjmp isr_ICP1_handler ; go here if a Timer/Counter1 Capture Event Interrupt occurs 
                                 
000016 c026                      .org OC1Aaddr ; memory location of Timer/Counter1 Compare Match A Interrupt
                                 rjmp isr_OC1A_handler ; go here if a Timer/Counter1 Compare Match A Interrupt occurs 
                                 
000018 c025                      .org OC1Baddr ; memory location of Timer/Counter1 Compare Match B Interrupt
                                 rjmp isr_OC1B_handler ; go here if a Timer/Counter1 Compare Match B Interrupt occurs 
                                 
00001a c024                      .org OVF1addr ; memory location of Timer/Counter1 Overflow Interrupt
                                 rjmp isr_OVF1_handler ; go here if a Timer/Counter1 Overflow Interrupt occurs 
                                 
00001c c023                      .org OC0Aaddr ; memory location of Timer/Counter0 Compare Match A Interrupt
                                 rjmp isr_OC0A_handler ; go here if a Timer/Counter0 Compare Match A Interrupt occurs 
                                 
00001e c034                      .org OC0Baddr ; memory location of Timer/Counter0 Compare Match B Interrupt
                                 rjmp isr_OC0B_handler ; go here if a Timer/Counter0 Compare Match B Interrupt occurs 
                                 
000020 c033                      .org OVF0addr               ; memory location of Timer0 overflow handler
                                 rjmp isr_OVF0_handler ; go here if a timer0 overflow interrupt occurs 
                                 
000022 c032                      .org SPIaddr               ; memory location of SPI Serial Transfer Complete handler
                                 rjmp isr_SPI_handler ; go here if a SPI Serial Transfer Complete interrupt occurs 
                                 
000024 c031                      .org URXCaddr               ; memory location of USART Rx Complete handler
                                 rjmp isr_URXC_handler ; go here if a USART Rx Complete interrupt occurs 
                                 
000026 c04c                      .org UDREaddr               ; memory location of USART, Data Register Empty handler
                                 rjmp isr_UDRE_handler ; go here if a USART, Data Register Empty interrupt occurs 
                                 
000028 c04b                      .org UTXCaddr               ; memory location of USART Tx Complete handler
                                 rjmp isr_UTXC_handler ; go here if a USART Tx Complete interrupt occurs 
                                 
00002a c04a                      .org ADCCaddr               ; memory location of ADC Conversion Complete handler
                                 rjmp isr_ADCC_handler ; go here if a ADC Conversion Complete interrupt occurs 
                                 
00002c c049                      .org ERDYaddr               ; memory location of EEPROM Ready handler
                                 rjmp isr_ERDY_handler ; go here if a EEPROM Ready interrupt occurs 
                                 
00002e c048                      .org ACIaddr               ; memory location of Analog Comparator handler
                                 rjmp isr_ACI_handler ; go here if a Analog Comparator interrupt occurs 
                                 
000030 c047                      .org TWIaddr               ; memory location of Two-wire Serial Interface handler
                                 rjmp isr_TWI_handler ; go here if a Two-wire Serial Interface interrupt occurs 
                                 
000032 c046                      .org SPMRaddr               ; memory location of Store Program Memory Read handler
                                 rjmp isr_SPMR_handler ; go here if a Store Program Memory Read interrupt occurs 
                                 
                                 ;===========================================
                                 ; interrupt service routines  
000033 9518                      isr_INT0_handler:
                                 reti ; External Interrupt 0
                                 
000034 9518                      isr_INT1_handler:
                                 reti ; External Interrupt 1 
                                 
000035 9518                      isr_PCI0_handler:
                                 reti ; Pin Change Interrupt 0 
                                 
000036 9518                      isr_PCI1_handler:
                                 reti ; Pin Change Interrupt 1 
                                 
000037 9518                      isr_PCI2_handler:
                                 reti ; Pin Change Interrupt 2 
                                 
000038 9518                      isr_WDT_handler:
                                 reti ; Watchdog Time-out Interrupt  
                                 
000039 9518                      isr_OC2A_handler:
                                 reti ; Timer/Counter2 Compare Match A Interrupt  
                                 
00003a 9518                      isr_OC2B_handler:
                                 reti ; Timer/Counter2 Compare Match B Interrupt  
                                 
00003b 9518                      isr_OVF2_handler:
                                 reti ; Timer/Counter2 Overflow Interrupt  
                                 
00003c 9518                      isr_ICP1_handler:
                                 reti ; Timer/Counter1 Capture Event Interrupt  
                                 
00003d 9518                      isr_OC1A_handler:
                                 reti ; Timer/Counter1 Compare Match A Interrupt  
                                 
00003e 9518                      isr_OC1B_handler:
                                 reti ; Timer/Counter1 Compare Match B Interrupt  
                                 
00003f 9518                      isr_OVF1_handler:
                                 reti ; Timer/Counter1 Overflow Interrupt  
                                 
000040 b65f                      isr_OC0A_handler:
000041 925f                      in r5,SREG
000042 930f                      push r5
000043 93cf                      push r16
000044 93df                      push YL
                                 push YH
000045 9bf2                      
000046 c006                      sbis FLAGS0,UpdateOCR0A //veo si hay que modificar el duty
000047 e7c0                      rjmp salir
000048 e0d1                      ldi YL,low(Temp_OCR0A)
000049 8108                      ldi YH,high(Temp_OCR0A)
                                 ldd r16,Y+0
00004a bd07                      //lds r16, Temp_OCR0A
00004b 98f2                      out OCR0A, r16
00004c 9af1                      cbi FLAGS0, UpdateOCR0A //como ya actualice el registro reseteo el flag
                                 sbi FLAGS0, COMM_Rsp //Debo informar el cambio
                                 
00004d 91df                      salir:
00004e 91cf                      pop YH
00004f 910f                      pop YL
000050 905f                      pop r16
000051 be5f                      pop r5
000052 9518                      out SREG,r5
                                 reti ; Timer/Counter0 Compare Match A Interrupt  
                                 
000053 9518                      isr_OC0B_handler:
                                 reti ; Timer/Counter0 Compare Match B Interrupt  
                                 
000054 9518                      isr_OVF0_handler:
                                 reti ; Timer0 overflow interrupt  
                                 
000055 9518                      isr_SPI_handler:
                                 reti ; SPI Serial Transfer Complete interrupt  
                                 
000056 b65f                      isr_URXC_handler:
000057 925f                      in r5,SREG
000058 930f                      push r5
000059 939f                      push r16
00005a 93bf                      push r25
00005b 93af                      push XH
                                 push XL
00005c e7a6                      
00005d e0b1                      ldi XL, low(BUFFER)
                                 ldi XH, high(BUFFER)
00005e 9100 00c6                 
000060 3204                      lds r16, UDR0
000061 f419                      cpi r16, '$'
                                 brne _noini
000062 2799                      _ini:
000063 9390 0175                 clr r25
                                 sts indexRx, r25
000065 9190 0175                 _noini:
000067 0fa9                      lds r25, indexRx
000068 930c                      add XL, r25
000069 9593                      st X,r16
00006a 9390 0175                 inc r25
                                 sts indexRx, r25
00006c 91af                      
00006d 91bf                      pop XL
00006e 919f                      pop XH
00006f 910f                      pop r25
                                 pop r16
000070 905f                      ; Restore global interrupt flag
000071 be5f                      pop r5
000072 9518                      out SREG,r5
                                 reti ; USART Rx Complete interrupt  
                                 
000073 9518                      isr_UDRE_handler:
                                 reti ; USART, Data Register Empty interrupt  
                                 
000074 9518                      isr_UTXC_handler:
                                 reti ; USART Tx Complete interrupt  
                                 
000075 9518                      isr_ADCC_handler:
                                 reti ; ADC Conversion Complete interrupt  
                                 
000076 9518                      isr_ERDY_handler:
                                 reti ; EEPROM Ready interrupt  
                                 
000077 9518                      isr_ACI_handler:
                                 reti ; Analog Comparator interrupt  
                                 
000078 9518                      isr_TWI_handler:
                                 reti ; Two-wire Serial Interface interrupt  
                                 
000079 9518                      isr_SPMR_handler:
                                 reti ; Store Program Memory Read interrupt  
                                 
                                 ;===========================================
                                 ; Main body of program:
                                 
                                 Reset:
00007a ef0f                      
00007b bf0d                      ldi R16, LOW(RAMEND)     ; Lower address byte RAM byte lo.
00007c e008                      out SPL, R16         ; Stack pointer initialise lo.
00007d bf0e                      ldi R16, HIGH(RAMEND)   ; Higher address of the RAM byte hi.
00007e c000                      out SPH, R16 ; Stack pointer initialise hi. 
                                 rjmp Setup
                                 
                                 ; write your code here
                                 
00007f 94f8                      Setup:
000080 e020                      	cli
000081 e010                      	ldi r18,0x00
000082 d007                      	ldi r17,0x00
000083 d00d                      	rcall EEPROM_read
000084 d083                      	rcall USART_Init
                                 	rcall init_PWM
000085 e400                      	//declaro el pin D6 (6) como salida
000086 b90a                      	ldi r16,0x40
000087 985e                      	out DDRD,r16
000088 9478                      	cbi PORTD,6
000089 c089                      	sei
                                 	rjmp Loop
                                 
                                 
                                 EEPROM_read:
00008a 99f9                      	; Wait for completion of previous write
00008b cffe                      	sbic EECR,EEPE
                                 	rjmp EEPROM_read
00008c bd22                      	; Set up address (r18:r17) in address register
00008d bd11                      	out EEARH, r18
                                 	out EEARL, r17
00008e 9af8                      	; Start eeprom read by writing EERE
                                 	sbi EECR,EERE
00008f b500                      	; Read data from Data Register
000090 9508                      	in r16,EEDR
                                 	ret
                                 
                                 USART_Init:
                                 		//	b7	b6	b5	b4	b3	b2	b1	b0
                                 		//	BR2	BR1	BR0	D1	D0	P1	P0	SB
                                 		//BR2:0 me dicen el baudrate
                                 		//D1:0 me dicen los bits de dato
                                 		//P1:P0 me dicen la paridad
000091 ee10                      		//SB me dice el bit de stop
000092 2310                      		ldi r17, 0xE0
000093 d010                      		and r17,r16  //enmascaro los tres bits mas significativos que tienen la información del baudrate
                                 		rcall set_baudrate
000094 e928                      		//habilito la transmisión y la recepción, habilito la interrupción por recepción RXC0
000095 9320 00c1                 		ldi r18, (1<<TXEN0)|(1<<RXEN0)|(1<<RXCIE0)
000097 e118                      		sts UCSR0B, r18
000098 2310                      		ldi r17,0x18  //enmascaro los bits 4 y 3 que me dicen los bits de dato a usar
000099 2722                      		and r17,r16
00009a d04f                      		clr r18
00009b e016                      		rcall set_databits
00009c 2310                      		ldi r17,0x06 //enmascaro los bits 2 y 1 que me dicen la paridad
00009d d05a                      		and r17,r16
00009e e011                      		rcall set_parity
00009f 2310                      		ldi r17,0x01 //enmascaro el bits 0 que me dicen el bit de stop
0000a0 d061                      		and r17,r16
                                 		rcall set_stopbit
0000a1 9320 00c2                 		//en el registro r18 tengo la configuración de los bits de dato, la paridad y el bit de stop
0000a3 9508                      		sts UCSR0C, r18
                                 		ret
                                 
0000a4 3010                      set_baudrate:
0000a5 f439                      		cpi r17,0x00  //baudrate=2400-000
                                 		brne baudrate1
0000a6 e020                      		//seteo el baudrate 2400
0000a7 9320 00c5                 		ldi r18, 0x00
0000a9 ec2f                      		sts UBRR0H, r18
0000aa 9320 00c4                 		ldi r18, 0xCF
0000ac 9508                      		sts UBRR0L, r18
                                 		ret
                                 		//------------------------------
0000ad 3210                      		baudrate1:
0000ae f439                      		cpi r17,0x20  //baudrate=4800-001
                                 		brne baudrate2
0000af e020                      		//seteo el baudrate 4800
0000b0 9320 00c5                 		ldi r18, 0x00
0000b2 e627                      		sts UBRR0H, r18
0000b3 9320 00c4                 		ldi r18, 0x67
0000b5 9508                      		sts UBRR0L, r18
                                 		ret
                                 		//------------------------------
0000b6 3410                      		baudrate2:
0000b7 f439                      		cpi r17,0x40  //baudrate=9600-010
                                 		brne baudrate3
0000b8 e020                      		//seteo el baudrate 9600
0000b9 9320 00c5                 		ldi r18, 0x00
0000bb e627                      		sts UBRR0H, r18
0000bc 9320 00c4                 		ldi r18, 0x67//0x33
0000be 9508                      		sts UBRR0L, r18
                                 		ret
                                 		//------------------------------
0000bf 3610                      		baudrate3:
0000c0 f439                      		cpi r17,0x60  //baudrate=14400-011
                                 		brne baudrate4
0000c1 e020                      		//seteo el baudrate 14400
0000c2 9320 00c5                 		ldi r18, 0x00
0000c4 e222                      		sts UBRR0H, r18
0000c5 9320 00c4                 		ldi r18, 0x22
0000c7 9508                      		sts UBRR0L, r18
                                 		ret
                                 		//------------------------------
0000c8 3810                      		baudrate4:
0000c9 f439                      		cpi r17,0x80 //baudrate=19200-100
                                 		brne baudrate5
0000ca e020                      		//seteo el baudrate 19200
0000cb 9320 00c5                 		ldi r18, 0x00
0000cd e129                      		sts UBRR0H, r18
0000ce 9320 00c4                 		ldi r18, 0x19
0000d0 9508                      		sts UBRR0L, r18
                                 		ret
                                 		//------------------------------
0000d1 3a10                      		baudrate5:
0000d2 f439                      		cpi r17,0xA0  //baudrate=28800-101
                                 		brne baudrate6
0000d3 e020                      		//seteo el baudrate 28800
0000d4 9320 00c5                 		ldi r18, 0x00
0000d6 e120                      		sts UBRR0H, r18
0000d7 9320 00c4                 		ldi r18, 0x10
0000d9 9508                      		sts UBRR0L, r18
                                 		ret
                                 		//------------------------------
0000da 3c10                      		baudrate6:
0000db f439                      		cpi r17,0xC0	//baudrate=38400-110
                                 		brne baudrate7
0000dc e020                      		//seteo el baudrate 38400
0000dd 9320 00c5                 		ldi r18, 0x00
0000df e02c                      		sts UBRR0H, r18
0000e0 9320 00c4                 		ldi r18, 0x0C
0000e2 9508                      		sts UBRR0L, r18
                                 		ret
                                 		//------------------------------
                                 		baudrate7:
0000e3 e020                      		//seteo el baudrate 57600-111
0000e4 9320 00c5                 		ldi r18, 0x00
0000e6 e028                      		sts UBRR0H, r18
0000e7 9320 00c4                 		ldi r18, 0x08
0000e9 9508                      		sts UBRR0L, r18
                                 		ret
                                 
0000ea 3010                      set_databits:
0000eb f411                      		cpi r17,0x00
                                 		brne databits6
0000ec e020                      		//uso 5 bits de dato
0000ed 9508                      		ldi r18,(0<<UCSZ01)|(0<<UCSZ00)
                                 		ret
                                 		//-------------------------------
0000ee 3018                      		databits6:
0000ef f411                      		cpi r17,0x08
                                 		brne databits7
0000f0 e022                      		//uso 6 bits de dato
0000f1 9508                      		ldi r18,(0<<UCSZ01)|(1<<UCSZ00)
                                 		ret
                                 		//-------------------------------
0000f2 3110                      		databits7:
0000f3 f411                      		cpi r17,0x10
                                 		brne databits8
0000f4 e024                      		//uso 7 bits de dato
0000f5 9508                      		ldi r18,(1<<UCSZ01)|(0<<UCSZ00)
                                 		ret
                                 		//-------------------------------
                                 		databits8:
0000f6 e026                      		//uso 8 bits de dato
0000f7 9508                      		ldi r18,(1<<UCSZ01)|(1<<UCSZ00)
                                 		ret
                                 
0000f8 3010                      set_parity:
0000f9 f411                      		cpi r17,0x00
                                 		brne odd
0000fa 6020                      		//sin paridad
0000fb 9508                      		ori r18,(0<<UPM01)|(0<<UPM00)
                                 		ret
                                 		//-----------------------------
0000fc 3012                      		odd:
0000fd f411                      		cpi r17,0x02
                                 		brne even
0000fe 6320                      		//paridad impar
0000ff 9508                      		ori r18,(1<<UPM01)|(1<<UPM00)
                                 		ret
                                 		//-----------------------------
                                 		even:
000100 6220                      		//paridad par
000101 9508                      		ori r18,(1<<UPM01)|(0<<UPM00)
                                 		ret
                                 
000102 3010                      set_stopbit:
000103 f411                      		cpi r17,0x00
                                 		brne two
000104 6020                      		//1 bit de stop
000105 9508                      		ori r18,(0<<USBS0)
                                 		ret
                                 		//------------------
                                 		two:
000106 6028                      		//2 bits de stop
000107 9508                      		ori r18,(1<<USBS0)
                                 		ret
                                 
                                 init_PWM:
000108 e801                      		//el pin OC0A esta en modo pwm phase correct, no invertido.
000109 bd04                      		ldi r16,(1<<COM0A1)|(0<<COM0A0)|(0<<COM0B1)|(0<<COM0B0)|(0<<WGM01)|(1<<WGM00)
                                 		out TCCR0A,r16
00010a 2700                      		//pongo en 0 el contador del timer 0
00010b bd06                      		clr r16
                                 		out TCNT0,r16
00010c bd07                      		//inicializo con 0 de pwm, led apagado
                                 		out OCR0A,r16
00010d e002                      		//habilito la interrupción por compare match con OCR0A, para cambiar el duty
00010e 9300 006e                 		ldi r16,(1<<OCIE0A)
                                 		sts TIMSK0,r16
000110 e004                      		//el timer 0 tiene un prescaler de 256
000111 bd05                      		ldi r16,(0<<WGM02)|(1<<CS02)|(0<<CS01)|(0<<CS00)
000112 9508                      		out TCCR0B,r16
                                 		ret
                                 
000113 d00b                      Loop:
000114 99f0                      	rcall Get_COMM_PC	//Veo si llegó un comando
000115 d001                      	sbic FLAGS0,COMM_PC	//Si no llegó no hago nada
000116 cffc                      	rcall Procesamiento //Si llegó lo proceso
                                 	rjmp Loop
                                 
000117 940e 023d                 Procesamiento:
000119 940e 0272                 	call PWM_bcd_to_bin
00011b 99f1                      	call Escalar_PWM
00011c 940e 0198                 	sbic FLAGS0,COMM_Rsp
00011e 9508                      	call Send_Rsp
                                 	ret
                                 
00011f 9100 0175                 Get_COMM_PC: //detecta si llego un comando por la USART
                                 	lds r16, indexRx
                                 	//cargo el índice y me fijo si llegaron 13, 14 o 15 caracteres
000121 300d                      	//de ser así, tengo un comando, sino no.
000122 f029                      	cpi r16,13
000123 300e                      	breq dato1
000124 f079                      	cpi r16,0x0E
000125 300f                      	breq dato2
000126 f101                      	cpi r16,15
000127 c048                      	breq dato3
                                 	rjmp nodata
                                 	dato1://tenemos 1 numero
000128 d048                      		//el puntero Y apunta al buffer de datos
000129 3f8f                      		rcall Verify
00012a f181                      		cpi r24,0xFF
00012b e031                      		breq errores
00012c 850b                      		ldi r19,0x01 //guardo la cantidad de numeros
00012d 700f                      		ldd r16,Y+11 //guardo el numero
00012e 9300 0171                 		andi r16,0x0F //con esto paso de un ascii a bcd
000130 850c                      		sts BCDR0,r16 //el bcd lo guardo en BCDR0
000131 320a                      		ldd r16,Y+12
000132 f541                      		cpi r16,'*'
000133 c034                      		brne errores
                                 		rjmp no_hay_error
000134 ef4f                      	dato2: //tenemos 2 numeros
000135 b94a                      	ldi r20,0xff
000136 9a5f                      	out DDRD,r20
000137 d039                      	sbi PORTD,7
000138 3f8f                      		rcall Verify
000139 f109                      		cpi r24,0xFF
00013a e032                      		breq errores
00013b 850b                      		ldi r19,0x02 //guardo la cantidad de numeros
00013c 700f                      		ldd r16,Y+11 //guardo el primer numero
00013d 9300 0172                 		andi r16,0x0F //con esto paso de un ascii a bcd
00013f 850c                      		sts BCDR1,r16 //el bcd lo guardo en BCDR1
000140 700f                      		ldd r16,Y+12
000141 9300 0171                 		andi r16,0x0F
000143 850d                      		sts BCDR0,r16//guardo el segundo numero en BCDR0
000144 320a                      		ldd r16,Y+13
000145 f4a9                      		cpi r16,'*'
000146 c021                      		brne errores
                                 		rjmp no_hay_error
000147 d029                      	dato3:
000148 3f8f                      		rcall Verify
000149 f089                      		cpi r24,0xFF
00014a e032                      		breq errores
00014b 850b                      		ldi r19,0x02 //guardo la cantidad de numeros
00014c 700f                      		ldd r16,Y+11 //guardo el primer numero
00014d 9300 0173                 		andi r16,0x0F //con esto paso de un ascii a bcd
00014f 850c                      		sts BCDR2,r16 //el bcd lo guardo en BCDR2
000150 700f                      		ldd r16,Y+12
000151 9300 0172                 		andi r16,0x0F
000153 850d                      		sts BCDR1,r16 //guardo el segundo numero en BCDR1
000154 700f                      		ldd r16,Y+13
000155 9300 0171                 		andi r16,0x0F
000157 850e                      		sts BCDR0,r16 //guardo el tercer numero en BCDR0
000158 320a                      		ldd r16,Y+14
000159 f409                      		cpi r16,'*'
00015a c00d                      		brne errores
                                 		rjmp no_hay_error
00015b e000                      	errores:
00015c 9300 0175                 		ldi r16,0
00015e 9300 0171                 		sts indexRx,r16
000160 9300 0172                 		sts BCDR0,r16
000162 9300 0173                 		sts BCDR1,r16
000164 98f1                      		sts BCDR2,r16
000165 98f0                      		cbi FLAGS0, COMM_Rsp
000166 98f2                      		cbi FLAGS0, COMM_PC
000167 9508                      		cbi FLAGS0,UpdateOCR0A	
                                 		ret
000168 9330 0174                 	no_hay_error:
00016a e000                      		sts BCDdigit,r19
00016b 9300 0175                 		ldi r16,0
00016d 9af1                      		sts indexRx,r16
00016e 9af0                      		sbi FLAGS0, COMM_Rsp
00016f 9af2                      		sbi FLAGS0, COMM_PC
                                 		sbi FLAGS0,UpdateOCR0A
000170 9508                      		nodata:
                                 		ret
                                 
000171 e7c6                      Verify:
000172 e0d1                      		ldi YL,low(BUFFER)
000173 8108                      		ldi YH,high(BUFFER)
000174 3204                      		ld r16,Y //cargo el primer caracter del buffer
000175 f501                      		cpi r16,'$' //veo si llego $
000176 8109                      		brne error
000177 3504                      		ldd r16,Y+1
000178 f4e9                      		cpi r16,'T'
000179 810a                      		brne error
00017a 3404                      		ldd r16,Y+2
00017b f4d1                      		cpi r16,'D'
00017c 810b                      		brne error
00017d 3409                      		ldd r16,Y+3
00017e f4b9                      		cpi r16,'I'
00017f 810c                      		brne error
000180 3409                      		ldd r16,Y+4
000181 f4a1                      		cpi r16,'I'
000182 810d                      		brne error
000183 320c                      		ldd r16,Y+5
000184 f489                      		cpi r16,','
000185 810e                      		brne error
000186 3403                      		ldd r16,Y+6
000187 f471                      		cpi r16,'C'
000188 810f                      		brne error
000189 3408                      		ldd r16,Y+7
00018a f459                      		cpi r16,'H'
00018b 8508                      		brne error
00018c 3401                      		ldd r16,Y+8
00018d f441                      		cpi r16,'A'
00018e 8509                      		brne error
00018f 320c                      		ldd r16,Y+9
000190 f429                      		cpi r16,','
000191 850a                      		brne error
000192 3205                      		ldd r16,Y+10
000193 f411                      		cpi r16,'%'
000194 2788                      		brne error
000195 9508                      		clr r24
                                 		ret
000196 ef8f                      		error:
000197 9508                      			ldi r24,0xFF
                                 			ret
                                 
                                 
000198 e050                      Send_Rsp: //Envia la CadenaRp al buffer
                                 		ldi r21,0x00
000199 d004                      		enviar_dato:
00019a 3151                      		rcall Tx_Byte_USART0
00019b f7e9                      		cpi r21,0x11
00019c 98f1                      		brne enviar_dato
00019d 9508                      		cbi FLAGS0,COMM_Rsp
                                 		ret
                                 
                                 
00019e 9110 00c0                 Tx_Byte_USART0:
0001a0 ff15                      		lds r17,UCSR0A
0001a1 cffc                      		sbrs r17,UDRE0
0001a2 3050                      		rjmp Tx_Byte_USART0
0001a3 f429                      		cpi r21,0x00
0001a4 e264                      		brne symbol1
0001a5 9360 00c6                 		ldi r22,'$'
0001a7 e051                      		sts UDR0,r22
0001a8 9508                      		ldi r21,0x01
                                 		ret
0001a9 3051                      		symbol1:
0001aa f429                      			cpi r21,0x01
0001ab e564                      			brne symbol2
0001ac 9360 00c6                 			ldi r22,'T'
0001ae e052                      			sts UDR0,r22
0001af 9508                      			ldi r21,0x02
                                 			ret
0001b0 3052                      		symbol2:
0001b1 f429                      			cpi r21,0x02
0001b2 e464                      			brne symbol4
0001b3 9360 00c6                 			ldi r22,'D'
0001b5 e054                      			sts UDR0,r22
0001b6 9508                      			ldi r21,0x04
                                 			ret
0001b7 3054                      		symbol4:
0001b8 f429                      			cpi r21,0x04
0001b9 e469                      			brne symbol5
0001ba 9360 00c6                 			ldi r22,'I'
0001bc e055                      			sts UDR0,r22
0001bd 9508                      			ldi r21,0x05
                                 			ret
0001be 3055                      		symbol5:
0001bf f429                      			cpi r21,0x05
0001c0 e469                      			brne symbol6
0001c1 9360 00c6                 			ldi r22,'I'
0001c3 e056                      			sts UDR0,r22
0001c4 9508                      			ldi r21,0x06
                                 			ret
0001c5 3056                      		symbol6:
0001c6 f429                      			cpi r21,0x06
0001c7 e26c                      			brne symbol7
0001c8 9360 00c6                 			ldi r22,','
0001ca e057                      			sts UDR0,r22
0001cb 9508                      			ldi r21,0x07
                                 			ret
0001cc 3057                      		symbol7:
0001cd f429                      			cpi r21,0x07
0001ce e463                      			brne symbol8
0001cf 9360 00c6                 			ldi r22,'C'
0001d1 e058                      			sts UDR0,r22
0001d2 9508                      			ldi r21,0x08
                                 			ret
0001d3 3058                      		symbol8:
0001d4 f429                      			cpi r21,0x08
0001d5 e468                      			brne symbol9
0001d6 9360 00c6                 			ldi r22,'H'
0001d8 e059                      			sts UDR0,r22
0001d9 9508                      			ldi r21,0x09
                                 			ret
0001da 3059                      		symbol9:
0001db f429                      			cpi r21,0x09
0001dc e461                      			brne symbol10
0001dd 9360 00c6                 			ldi r22,'A'
0001df e05a                      			sts UDR0,r22
0001e0 9508                      			ldi r21,0x0A
                                 			ret
0001e1 305a                      		symbol10:
0001e2 f429                      			cpi r21,0x0A
0001e3 e26c                      			brne symbol11
0001e4 9360 00c6                 			ldi r22,','
0001e6 e05b                      			sts UDR0,r22
0001e7 9508                      			ldi r21,0x0B
                                 			ret
0001e8 305b                      		symbol11:
0001e9 f429                      			cpi r21,0x0B
0001ea e265                      			brne symbol12
0001eb 9360 00c6                 			ldi r22,'%'
0001ed e05c                      			sts UDR0,r22
0001ee 9508                      			ldi r21,0x0C
                                 			ret
0001ef 305c                      		symbol12:
0001f0 f4f9                      			cpi r21,0x0C
0001f1 e7c4                      			brne symbol13
0001f2 e0d1                      			ldi YL,low(BCDdigit)
0001f3 8168                      			ldi YH,high(BCDdigit)
0001f4 3063                      			ld r22,Y
0001f5 f441                      			cpi r22,0x03
0001f6 e7c3                      			brne son_dos
0001f7 e0d1                      			ldi YL,low(BCDR2)
0001f8 8168                      			ldi YH,high(BCDR2)
0001f9 6360                      			ld r22,Y
0001fa 9360 00c6                 			ori r22,0x30
0001fc e05d                      			sts UDR0,r22
0001fd 9508                      			ldi r21,0x0D
                                 			ret
0001fe 3062                      			son_dos:
0001ff f441                      				cpi r22,0x02
000200 e7c2                      				brne es_uno
000201 e0d1                      				ldi YL,low(BCDR1)
000202 8168                      				ldi YH,high(BCDR1)
000203 6360                      				ld r22,Y
000204 9360 00c6                 				ori r22,0x30
000206 e05d                      				sts UDR0,r22
000207 9508                      				ldi r21,0x0D
                                 				ret
000208 e7c1                      				es_uno:
000209 e0d1                      					ldi YL,low(BCDR0)
00020a 8168                      					ldi YH,high(BCDR0)
00020b 6360                      					ld r22,Y
00020c 9360 00c6                 					ori r22,0x30
00020e e05f                      					sts UDR0,r22
00020f 9508                      					ldi r21,0x0F
                                 					ret
000210 305d                      		symbol13:
000211 f4a9                      			cpi r21,0x0D
000212 e7c4                      			brne symbol14
000213 e0d1                      			ldi YL,low(BCDdigit)
000214 8168                      			ldi YH,high(BCDdigit)
000215 3062                      			ld r22,Y
000216 f441                      			cpi r22,0x02
000217 e7c1                      			brne queda_uno
000218 e0d1                      			ldi YL,low(BCDR0)
000219 8168                      			ldi YH,high(BCDR0)
00021a 6360                      			ld r22,Y
00021b 9360 00c6                 			ori r22,0x30
00021d e05f                      			sts UDR0,r22
00021e 9508                      			ldi r21,0x0F
                                 			ret
00021f e7c2                      			queda_uno:
000220 e0d1                      				ldi YL,low(BCDR1)
000221 8168                      				ldi YH,high(BCDR1)
000222 6360                      				ld r22,Y
000223 9360 00c6                 				ori r22,0x30
000225 e05e                      				sts UDR0,r22
000226 9508                      				ldi r21,0x0E
                                 				ret
000227 305e                      		symbol14:
000228 f441                      			cpi r21,0x0E
000229 e7c1                      			brne symbol15
00022a e0d1                      			ldi YL,low(BCDR0)
00022b 8168                      			ldi YH,high(BCDR0)
00022c 6360                      			ld r22,Y
00022d 9360 00c6                 			ori r22,0x30
00022f e05f                      			sts UDR0,r22
000230 9508                      			ldi r21,0x0F
                                 			ret
000231 305f                      		symbol15:
000232 f429                      			cpi r21,0x0F
000233 e26a                      			brne symbol16
000234 9360 00c6                 			ldi r22,'*'
000236 e150                      			sts UDR0,r22
000237 9508                      			ldi r21,0x10
                                 			ret
000238 e06a                      		symbol16:
000239 9360 00c6                 			ldi r22,'\n'
00023b e151                      			sts UDR0,r22
00023c 9508                      			ldi r21,0x11
                                 		ret
                                 
00023d 93ef                      PWM_bcd_to_bin: //Conviernte el valor de pwm bcd en binario
00023e 93ff                      		push ZL
00023f 93cf                      		push ZH
000240 93df                      		push YL
                                 		push YH
000241 e7c4                      
000242 e0d1                      		ldi YL,low(BCDdigit)
000243 e6ef                      		ldi YH,high(BCDdigit)
000244 e0f1                      		ldi ZL,low(VAL_PWM)
000245 8108                      		ldi ZH,high(VAL_PWM)
000246 3003                      		ld r16,Y
000247 f099                      		cpi r16,3
000248 3002                      		breq convert3
000249 f029                      		cpi r16,2
00024a e7c1                      		breq convert2
00024b e0d1                      			ldi YL,low(BCDR0)
00024c 8108                      			ldi YH,high(BCDR0)
00024d 8300                      			ld r16,Y
00024e c01e                      			st Z,r16
                                 			rjmp exit
00024f e7c2                      		convert2:
000250 e0d1                      			ldi YL,low(BCDR1)
000251 8108                      			ldi YH,high(BCDR1)
000252 e01a                      			ld r16,Y
000253 9f01                      			ldi r17,0x0A
000254 2d10                      			mul r16,r17
000255 e7c1                      			mov r17,r0  //tengo la decena en r17
000256 e0d1                      			ldi YL,low(BCDR0)
000257 8108                      			ldi YH,high(BCDR0)
000258 0f01                      			ld r16,Y  //tengo la unidad en r16
000259 8300                      			add r16,r17 //sumo r16+r17 para tener el numero completo
00025a c012                      			st Z,r16
                                 			rjmp exit
00025b e7c3                      		convert3:
00025c e0d1                      			ldi YL,low(BCDR2)
00025d 8108                      			ldi YH,high(BCDR2)
00025e e614                      			ld r16,Y
00025f 9f01                      			ldi r17,0x64
000260 2d20                      			mul r16,r17
000261 e7c2                      			mov r18,r0  //tengo la centena en r18
000262 e0d1                      			ldi YL,low(BCDR1)
000263 8108                      			ldi YH,high(BCDR1)
000264 e01a                      			ld r16,Y
000265 9f01                      			ldi r17,0x0A
000266 2d10                      			mul r16,r17
000267 e7c1                      			mov r17,r0  //tengo la decena en r17
000268 e0d1                      			ldi YL,low(BCDR0)
000269 8108                      			ldi YH,high(BCDR0)
00026a 0f01                      			ld r16,Y  //tengo la unidad en r16
00026b 0f02                      			add r16,r17 //sumo r16+r17+r18 para tener el numero completo
00026c 8300                      			add r16,r18
                                 			st Z,r16
00026d 91df                      			exit:
00026e 91cf                      			pop YH
00026f 91ff                      			pop YL
000270 91ef                      			pop ZH
000271 9508                      			pop ZL
                                 			ret
                                 
000272 93ef                      Escalar_PWM:
000273 93ff                      		push ZL
000274 93cf                      		push ZH
000275 93df                      		push YL
                                 		push YH
000276 e6cf                      
000277 e0d1                      		ldi YL,low(VAL_PWM)
000278 e0eb                      		ldi YH,high(VAL_PWM)
000279 e0f1                      		ldi ZL,low(pwm_table)
00027a 8028                      		ldi ZH,high(pwm_table)
00027b 2433                      		ldd r2,Y+0
00027c 0de2                      		clr r3
00027d 1df3                      		add ZL, r2
00027e e7c0                      		adc ZH, r3
00027f e0d1                      		ldi YL,low(Temp_OCR0A)
000280 8100                      		ldi YH,high(Temp_OCR0A)
000281 8308                      		ldd r16,Z+0
                                 		std Y+0,r16
000282 91df                      
000283 91cf                      		pop YH
000284 91ff                      		pop YL
000285 91ef                      		pop ZH


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

"ATmega328P" register use summary:
x  :   1 y  :  38 z  :   4 r0 :   3 r1 :   0 r2 :   2 r3 :   2 r4 :   0 
r5 :   8 r6 :   0 r7 :   0 r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 
r13:   0 r14:   0 r15:   0 r16: 106 r17:  35 r18:  49 r19:   4 r20:   2 
r21:  36 r22:  49 r23:   0 r24:   5 r25:   8 r26:   4 r27:   3 r28:  25 
r29:  25 r30:   7 r31:   7 
Registers used: 22 out of 35 (62.9%)

"ATmega328P" instruction use summary:
.lds  :   0 .sts  :   0 adc   :   1 add   :   5 adiw  :   0 and   :   4 
andi  :   6 asr   :   0 bclr  :   0 bld   :   0 brbc  :   0 brbs  :   0 
brcc  :   0 brcs  :   0 break :   0 breq  :   8 brge  :   0 brhc  :   0 
brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 brlt  :   0 brmi  :   0 
brne  :  47 brpl  :   0 brsh  :   0 brtc  :   0 brts  :   0 brvc  :   0 
brvs  :   0 bset  :   0 bst   :   0 call  :   3 cbi   :   6 cbr   :   0 
clc   :   0 clh   :   0 cli   :   1 cln   :   0 clr   :   5 cls   :   0 
clt   :   0 clv   :   0 clz   :   0 com   :   0 cp    :   0 cpc   :   0 
cpi   :  55 cpse  :   0 dec   :   0 eor   :   0 fmul  :   0 fmuls :   0 
fmulsu:   0 icall :   0 ijmp  :   0 in    :   3 inc   :   1 jmp   :   0 
ld    :  16 ldd   :  22 ldi   : 120 lds   :   4 lpm   :   0 lsl   :   0 
lsr   :   0 mov   :   3 movw  :   0 mul   :   3 muls  :   0 mulsu :   0 
neg   :   0 nop   :   0 or    :   0 ori   :  11 out   :  13 pop   :  17 
push  :  17 rcall :  13 ret   :  47 reti  :  25 rjmp  :  38 rol   :   0 
ror   :   0 sbc   :   0 sbci  :   0 sbi   :   6 sbic  :   3 sbis  :   1 
sbiw  :   0 sbr   :   0 sbrc  :   0 sbrs  :   1 sec   :   0 seh   :   0 
sei   :   1 sen   :   0 ser   :   0 ses   :   0 set   :   0 sev   :   0 
sez   :   0 sleep :   0 spm   :   0 st    :   4 std   :   1 sts   :  52 
sub   :   0 subi  :   0 swap  :   0 tst   :   0 wdr   :   0 
Instructions used: 35 out of 113 (31.0%)

"ATmega328P" memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x00050e   1244      0   1244   32768   3.8%
[.dseg] 0x000100 0x000199      0    153    153    2048   7.5%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 0 warnings
